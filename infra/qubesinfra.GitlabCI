#!/usr/bin/python3
# -*- encoding: utf8 -*-
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2020 Frédéric Pierret <frederic.pierret@qubes-os.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import configparser
import os
import subprocess
import sys
import logging

logger = logging.getLogger('qubesinfra.GitlabCI')
console_handler = logging.StreamHandler(sys.stderr)
logger.addHandler(console_handler)

logger.setLevel(logging.DEBUG)

# defaults
config_defaults = {
    'owner_whitelist': 'QubesOS',
    'repo_whitelist': ''
}


def main(args=None):
    config_path = os.path.expanduser('~/.config/qubes/gitlabci')
    config = configparser.RawConfigParser(
        defaults=config_defaults, allow_no_value=True)
    config.read(config_path)

    # input data
    untrusted_repo_full_name = sys.stdin.readline().strip()
    untrusted_pr_number = sys.stdin.readline().strip()
    (untrusted_repo_owner, untrusted_repo_name) = \
        untrusted_repo_full_name.split('/', 1)

    owner_whitelist = config.get('DEFAULT', 'owner_whitelist').split(' ')
    if untrusted_repo_owner not in owner_whitelist:
        logger.error('Repository owner not whitelisted')
        return 1

    repo_owner = untrusted_repo_owner
    if '/' in untrusted_repo_name:
        logger.info('Invalid character in repository name')
        return 1

    repo_whitelist = config.get('DEFAULT', 'repo_whitelist')
    if repo_whitelist:
        if untrusted_repo_name not in repo_whitelist.split(' '):
            logger.error('Repository not whitelisted')
            return 1

    # input data sanitized
    repo_name = untrusted_repo_name
    pr_number = int(untrusted_pr_number)

    logger.info('Received %s/%s', repo_owner, pr_number)

    create_branch_cmd = [
        '{}/create-gitlab-branch.py'.format(config.get('DEFAULT', 'home')),
        '--clone', 'https://github.com/{}/{}'.format(repo_owner, repo_name),
        '--pull-request', str(pr_number),
        '--push', '{}'.format('https://gitlab.notset.fr'),
        '--repo', '{}/{}'.format('fepitre-bot', repo_name),
        '--debug'
    ]

    process_pipeline_cmd = [
        '{}/process-pipeline-status.py'.format(config.get('DEFAULT', 'home')),
        '--component', '{}'.format(repo_name),
        '--owner', '{}'.format(repo_owner),
        '--pull-request', str(pr_number),
        '--debug'
    ]

    command_env = os.environ.copy()
    if config.get('DEFAULT', 'github_app_id', fallback=None):
        command_env['GITHUB_APP_ID'] = config.get(
            'DEFAULT', 'github_app_id')
    if config.get('DEFAULT', 'pem_file_path', fallback=None):
        command_env['PEM_FILE_PATH'] = config.get(
            'DEFAULT', 'pem_file_path')
    if config.get('DEFAULT', 'github_installation_id', fallback=None):
        command_env['GITHUB_INSTALLATION_ID'] = config.get(
            'DEFAULT', 'github_installation_id')
    if config.get('DEFAULT', 'github_api_token', fallback=None):
        command_env['GITHUB_API_TOKEN'] = config.get(
            'DEFAULT', 'github_api_token')
    if config.get('DEFAULT', 'gitlab_api_token', fallback=None):
        command_env['GITLAB_API_TOKEN'] = config.get(
            'DEFAULT', 'gitlab_api_token')

    subprocess.check_call(create_branch_cmd, stdin=open(os.devnull, 'r'),
                          env=command_env)
    subprocess.check_call(process_pipeline_cmd, stdin=open(os.devnull, 'r'),
                          env=command_env)


if __name__ == '__main__':
    sys.exit(main())
