#!/usr/bin/python3
# -*- encoding: utf8 -*-
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2020 Frédéric Pierret <frederic.pierret@qubes-os.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import configparser
import os
import subprocess
import sys
import logging

logger = logging.getLogger('gitlabci.GitlabPipelineStatus')
console_handler = logging.StreamHandler(sys.stderr)
logger.addHandler(console_handler)

logger.setLevel(logging.DEBUG)

# defaults
config_defaults = {
    'owner_whitelist': 'QubesOS',
    'repo_whitelist': ''
}

GITLAB_STATUS = ('created', 'waiting_for_resource', 'preparing', 'pending',
                 'running', 'manual', 'scheduled', 'canceled', 'skipped',
                 'failed', 'success')


def main(args=None):
    config_path = os.path.expanduser('~/.config/qubes/gitlabci')
    config = configparser.RawConfigParser(
        defaults=config_defaults, allow_no_value=True)
    config.read(config_path)

    # input data
    untrusted_repo_full_name = sys.stdin.readline().strip()
    untrusted_pipeline_id = sys.stdin.readline().strip()
    untrusted_pipeline_ref = sys.stdin.readline().strip()
    untrusted_pipeline_status = sys.stdin.readline().strip()
    (untrusted_repo_owner, untrusted_repo_name) = \
        untrusted_repo_full_name.split('/', 1)

    owner_whitelist = config.get('DEFAULT', 'owner_whitelist').split(' ')
    if untrusted_repo_owner not in owner_whitelist:
        logger.error('Repository owner not whitelisted')
        return 1
    repo_owner = untrusted_repo_owner

    if '/' in untrusted_repo_name:
        logger.error('Invalid character in repository name')
        return 1

    # repo_whitelist = config.get('DEFAULT', 'repo_whitelist')
    # if repo_whitelist:
    #     if untrusted_repo_name not in repo_whitelist.split(' '):
    #         logger.error('Repository not whitelisted')
    #         return 1

    try:
        untrusted_pipeline_id = int(untrusted_pipeline_id)
    except ValueError:
        logger.error('Invalid pipeline id')
        return 1

    if not untrusted_pipeline_ref.startswith('pr-'):
        logger.error('Invalid pipeline reference')
        return 1

    if untrusted_pipeline_status not in GITLAB_STATUS:
        logger.error('Invalid pipeline status')
        return 1

    try:
        pr_number = int(untrusted_pipeline_ref.replace('pr-', ''))
    except ValueError:
        logger.error('Invalid pipeline id')
        return 1

    # input data sanitized
    repo_name = untrusted_repo_name
    pipeline_id = untrusted_pipeline_id
    pipeline_ref = untrusted_pipeline_ref
    pipeline_status = untrusted_pipeline_status

    command_env = os.environ.copy()
    if config.get('DEFAULT', 'github_app_id', fallback=None):
        command_env['GITHUB_APP_ID'] = config.get(
            'DEFAULT', 'github_app_id')
    if config.get('DEFAULT', 'pem_file_path', fallback=None):
        command_env['PEM_FILE_PATH'] = config.get(
            'DEFAULT', 'pem_file_path')
    if config.get('DEFAULT', 'github_installation_id', fallback=None):
        command_env['GITHUB_INSTALLATION_ID'] = config.get(
            'DEFAULT', 'github_installation_id')
    if config.get('DEFAULT', 'github_api_token', fallback=None):
        command_env['GITHUB_API_TOKEN'] = config.get(
            'DEFAULT', 'github_api_token')
    if config.get('DEFAULT', 'gitlab_api_token', fallback=None):
        command_env['GITLAB_API_TOKEN'] = config.get(
            'DEFAULT', 'gitlab_api_token')

    logger.info('Received %s: Pipeline %s/%s', repo_name, pipeline_ref,
                pipeline_status)

    process_pipeline_cmd = [
        '{}/process-pipeline.py'.format(config.get('DEFAULT', 'home')),
        '--component', '{}'.format(repo_name),
        '--owner', '{}'.format(repo_owner),
        '--pull-request', str(pr_number),
        '--pipeline-id', str(pipeline_id),
        '--pipeline-status', pipeline_status,
        '--debug'
    ]

    try:
        subprocess.check_call(process_pipeline_cmd, stdin=open(os.devnull, 'r'),
                              env=command_env)
    except subprocess.CalledProcessError:
        logger.info(
            "An error occured while processing status for {}/{}".format(
                repo_name, str(pr_number)))
        return 1


if __name__ == '__main__':
    sys.exit(main())
