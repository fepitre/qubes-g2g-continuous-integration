#!/usr/bin/python3
# -*- encoding: utf8 -*-
#
# The Qubes OS Project, http://www.qubes-os.org
#
# Copyright (C) 2020 Frédéric Pierret <frederic.pierret@qubes-os.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import configparser
import os
import subprocess
import sys
import logging

logger = logging.getLogger('gitlabci.GithubPullRequest')
console_handler = logging.StreamHandler(sys.stderr)
logger.addHandler(console_handler)
logger.setLevel(logging.DEBUG)


def main(args=None):
    config_path = os.path.expanduser('~/.config/qubes/gitlabci')
    config = configparser.RawConfigParser(allow_no_value=True)
    config.read(config_path)

    # input data
    untrusted_repo_full_name = sys.stdin.readline().strip()
    untrusted_pr_number = sys.stdin.readline().strip()
    # This is for information only as we don't need to use is as suffix for
    # managing the CI. We have .gitlab-ci.yml file now.
    untrusted_base_ref = sys.stdin.readline().strip()
    (untrusted_repo_owner, untrusted_repo_name) = \
        untrusted_repo_full_name.split('/', 1)

    if not config.has_section(untrusted_repo_owner):
        logger.error('Repository owner not whitelisted')
        return 1
    repo_owner = untrusted_repo_owner

    if '/' in untrusted_repo_name:
        logger.error('Invalid character in repository name')
        return 1

    # repo_whitelist = config.get('repo_owner', 'repo_whitelist')
    # if repo_whitelist:
    #     if untrusted_repo_name not in repo_whitelist.split(' '):
    #         logger.error('Repository not whitelisted')
    #         return 1

    # input data sanitized
    repo_name = untrusted_repo_name
    pr_number = int(untrusted_pr_number)
    base_ref = untrusted_base_ref

    command_env = os.environ.copy()
    # DEFAULT config
    if config.get('DEFAULT', 'github_app_id', fallback=None):
        command_env['GITHUB_APP_ID'] = config.get(
            'DEFAULT', 'github_app_id')
    if config.get('DEFAULT', 'pem_file_path', fallback=None):
        command_env['PEM_FILE_PATH'] = config.get(
            'DEFAULT', 'pem_file_path')
    if config.get('DEFAULT', 'github_api_token', fallback=None):
        command_env['GITHUB_API_TOKEN'] = config.get(
            'DEFAULT', 'github_api_token')
    if config.get('DEFAULT', 'gitlab_api_token', fallback=None):
        command_env['GITLAB_API_TOKEN'] = config.get(
            'DEFAULT', 'gitlab_api_token')

    # Per owner config
    if config.get(repo_owner, 'github_installation_id', fallback=None):
        command_env['GITHUB_INSTALLATION_ID'] = config.get(
            repo_owner, 'github_installation_id')

    logger.info('Received %s/%s (base ref: %s)', repo_name, pr_number,
                base_ref)

    create_branch_cmd = [
        '{}/create-gitlab-branch.py'.format(config.get('DEFAULT', 'home')),
        '--clone', 'https://github.com/{}/{}'.format(repo_owner, repo_name),
        '--push', '{}'.format('https://gitlab.com'),
        '--repo', '{}/{}'.format(repo_owner, repo_name),
        '--pull-request', str(pr_number),
        '--debug'
    ]

    try:
        subprocess.check_call(create_branch_cmd, stdin=open(os.devnull, 'r'),
                              env=command_env)
    except subprocess.CalledProcessError:
        logger.info(
            "An error occured while creating Gitlab branch for {}/{}".format(
                repo_name, str(pr_number)))
        return 1


if __name__ == '__main__':
    sys.exit(main())
